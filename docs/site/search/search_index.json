{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ahead | Star Welcome to ahead 's (Python version) website. ahead is a package for univariate and multivariate time series forecasting . The Python version is built on top of the R package with the same name. ahead 's source code is available on GitHub . Currently, 4 forecasting methods are implemented in the Python package: DynamicRegressor : univariate time series forecasting method adapted from forecast::nnetar . The Python implementation contains only the automatic version . EAT : univariate time series forecasting method based on combinations of R's forecast::ets , forecast::auto.arima , and forecast::thetaf Ridge2Regressor : multivariate time series forecasting method, based on quasi-randomized networks and presented in this paper VAR : multivariate time series forecasting method using Vector AutoRegressive model (VAR, mostly here for benchmarking purpose) Looking for a specific function? You can also use the search function available in the navigation bar. Installing From Pypi, stable version: pip install ahead From Github, for the development version: pip install git+https://github.com/Techtonique/ahead.git Quickstart Univariate time series import pandas as pd from ahead import DynamicRegressor # Data frame containing the time series dataset = { 'date' : ['2020-01-01', '2020-02-01', '2020-03-01', '2020-04-01', '2020-05-01'], 'value' : [34, 30, 35.6, 33.3, 38.1]} df = pd.DataFrame(dataset).set_index('date') print(df) # univariate time series forecasting d1 = DynamicRegressor(h = 5) d1.forecast(df) print(d1.result_df_) Multivariate time series import pandas as pd from ahead import Ridge2Regressor # Data frame containing the (3) time series dataset = { 'date' : ['2001-01-01', '2002-01-01', '2003-01-01', '2004-01-01', '2005-01-01'], 'series1' : [34, 30, 35.6, 33.3, 38.1], 'series2' : [4, 5.5, 5.6, 6.3, 5.1], 'series3' : [100, 100.5, 100.6, 100.2, 100.1]} df = pd.DataFrame(dataset).set_index('date') # multivariate time series forecasting r1 = Ridge2Regressor(h = 5) r1.forecast(df) print(r1.result_dfs_) Documentation For univariate models For DynamicRegressor For EAT For multivariate models For Ridge2Regressor For VAR Contributing Want to contribute to ahead 's development on Github, read this !","title":"ahead | <a class=\"github-button\" href=\"https://github.com/Techtonique/ahead_python/stargazers\" data-color-scheme=\"no-preference: light; light: light; dark: dark;\" data-size=\"large\" aria-label=\"Star the ahead /the ahead  on GitHub\">Star</a>"},{"location":"#ahead-star","text":"Welcome to ahead 's (Python version) website. ahead is a package for univariate and multivariate time series forecasting . The Python version is built on top of the R package with the same name. ahead 's source code is available on GitHub . Currently, 4 forecasting methods are implemented in the Python package: DynamicRegressor : univariate time series forecasting method adapted from forecast::nnetar . The Python implementation contains only the automatic version . EAT : univariate time series forecasting method based on combinations of R's forecast::ets , forecast::auto.arima , and forecast::thetaf Ridge2Regressor : multivariate time series forecasting method, based on quasi-randomized networks and presented in this paper VAR : multivariate time series forecasting method using Vector AutoRegressive model (VAR, mostly here for benchmarking purpose) Looking for a specific function? You can also use the search function available in the navigation bar.","title":"ahead | Star"},{"location":"#installing","text":"From Pypi, stable version: pip install ahead From Github, for the development version: pip install git+https://github.com/Techtonique/ahead.git","title":"Installing"},{"location":"#quickstart","text":"","title":"Quickstart"},{"location":"#univariate-time-series","text":"import pandas as pd from ahead import DynamicRegressor # Data frame containing the time series dataset = { 'date' : ['2020-01-01', '2020-02-01', '2020-03-01', '2020-04-01', '2020-05-01'], 'value' : [34, 30, 35.6, 33.3, 38.1]} df = pd.DataFrame(dataset).set_index('date') print(df) # univariate time series forecasting d1 = DynamicRegressor(h = 5) d1.forecast(df) print(d1.result_df_)","title":"Univariate time series"},{"location":"#multivariate-time-series","text":"import pandas as pd from ahead import Ridge2Regressor # Data frame containing the (3) time series dataset = { 'date' : ['2001-01-01', '2002-01-01', '2003-01-01', '2004-01-01', '2005-01-01'], 'series1' : [34, 30, 35.6, 33.3, 38.1], 'series2' : [4, 5.5, 5.6, 6.3, 5.1], 'series3' : [100, 100.5, 100.6, 100.2, 100.1]} df = pd.DataFrame(dataset).set_index('date') # multivariate time series forecasting r1 = Ridge2Regressor(h = 5) r1.forecast(df) print(r1.result_dfs_)","title":"Multivariate time series"},{"location":"#documentation","text":"","title":"Documentation"},{"location":"#for-univariate-models","text":"For DynamicRegressor For EAT","title":"For univariate models"},{"location":"#for-multivariate-models","text":"For Ridge2Regressor For VAR","title":"For multivariate models"},{"location":"#contributing","text":"Want to contribute to ahead 's development on Github, read this !","title":"Contributing"},{"location":"CONTRIBUTING/","text":"ahead 's Code of Conduct 1. Purpose A primary goal of this project is to be inclusive to the largest number of contributors, and most importantly with the most varied and diverse backgrounds possible . As such, we are committed to providing a friendly, safe and welcoming environment for all, regardless of gender, sexual orientation, ability, ethnicity, socioeconomic status, and religion, or lack of religion thereof. This code of conduct outlines our expectations for all those who participate to the project, as well as the consequences for unacceptable behavior. We invite all those who participate in, to help us create safe and positive experiences for everyone. 2. Open [Source/Culture/Tech] Citizenship A supplemental goal of this Code of Conduct is to encourage participants to recognize and strengthen the relationships between our actions and their effects on other participants. Communities mirror the societies in which they exist, and positive action is essential to counteract the many forms of inequality and abuses of power that exist in society. 3. Expected Behavior The following behaviors are expected and requested of all contributors: Attempt collaboration before conflict . Participate in an authentic and active way. In doing so, you contribute to the health and longevity of this project. Exercise consideration and respect in your speech and actions. Refrain from demeaning, discriminatory, or harassing behavior and speech. Be mindful of your surroundings and of your fellow participants. 4. Unacceptable Behavior The following behaviors are considered harassment and are unacceptable: Violence, threats of violence or violent language directed against another person. Sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory jokes and language. Posting or displaying sexually explicit or violent material. Posting or threatening to post other people's personally identifying information (\"doxing\"). Personal insults, particularly those related to gender, sexual orientation, race, religion, or disability. Inappropriate photography or recording. Unwelcome sexual attention. This includes, sexualized comments or jokes. Deliberate intimidation, stalking or following (online or in person). Advocating for, or encouraging, any of the above behavior. 5. Consequences of Unacceptable Behavior Unacceptable behavior from any contributor will not be tolerated. Anyone asked to stop unacceptable behavior is expected to comply immediately. If a contributor engages in unacceptable behavior, appropriate action will be taken, up to and including a temporary ban or permanent expulsion without warning. 6. Scope We expect all contributors to abide by this Code of Conduct in all venues, online and in-person. 7. Contact info thierry.moudiki AT gmail.com 8. License and attribution Portions of text derived from the Citizen Code of Conduct .","title":"Contributing"},{"location":"CONTRIBUTING/#aheads-code-of-conduct","text":"","title":"ahead's Code of Conduct"},{"location":"CONTRIBUTING/#1-purpose","text":"A primary goal of this project is to be inclusive to the largest number of contributors, and most importantly with the most varied and diverse backgrounds possible . As such, we are committed to providing a friendly, safe and welcoming environment for all, regardless of gender, sexual orientation, ability, ethnicity, socioeconomic status, and religion, or lack of religion thereof. This code of conduct outlines our expectations for all those who participate to the project, as well as the consequences for unacceptable behavior. We invite all those who participate in, to help us create safe and positive experiences for everyone.","title":"1. Purpose"},{"location":"CONTRIBUTING/#2-open-sourceculturetech-citizenship","text":"A supplemental goal of this Code of Conduct is to encourage participants to recognize and strengthen the relationships between our actions and their effects on other participants. Communities mirror the societies in which they exist, and positive action is essential to counteract the many forms of inequality and abuses of power that exist in society.","title":"2. Open [Source/Culture/Tech] Citizenship"},{"location":"CONTRIBUTING/#3-expected-behavior","text":"The following behaviors are expected and requested of all contributors: Attempt collaboration before conflict . Participate in an authentic and active way. In doing so, you contribute to the health and longevity of this project. Exercise consideration and respect in your speech and actions. Refrain from demeaning, discriminatory, or harassing behavior and speech. Be mindful of your surroundings and of your fellow participants.","title":"3. Expected Behavior"},{"location":"CONTRIBUTING/#4-unacceptable-behavior","text":"The following behaviors are considered harassment and are unacceptable: Violence, threats of violence or violent language directed against another person. Sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory jokes and language. Posting or displaying sexually explicit or violent material. Posting or threatening to post other people's personally identifying information (\"doxing\"). Personal insults, particularly those related to gender, sexual orientation, race, religion, or disability. Inappropriate photography or recording. Unwelcome sexual attention. This includes, sexualized comments or jokes. Deliberate intimidation, stalking or following (online or in person). Advocating for, or encouraging, any of the above behavior.","title":"4. Unacceptable Behavior"},{"location":"CONTRIBUTING/#5-consequences-of-unacceptable-behavior","text":"Unacceptable behavior from any contributor will not be tolerated. Anyone asked to stop unacceptable behavior is expected to comply immediately. If a contributor engages in unacceptable behavior, appropriate action will be taken, up to and including a temporary ban or permanent expulsion without warning.","title":"5. Consequences of Unacceptable Behavior"},{"location":"CONTRIBUTING/#6-scope","text":"We expect all contributors to abide by this Code of Conduct in all venues, online and in-person.","title":"6. Scope"},{"location":"CONTRIBUTING/#7-contact-info","text":"thierry.moudiki AT gmail.com","title":"7. Contact info"},{"location":"CONTRIBUTING/#8-license-and-attribution","text":"Portions of text derived from the Citizen Code of Conduct .","title":"8. License and attribution"},{"location":"LICENSE/","text":"","title":"License"},{"location":"documentation/dynamicregressor/","text":"DynamicRegressor Dynamic Regression model adapted from R's forecast::nnetar [source] DynamicRegressor ahead.DynamicRegressor.DynamicRegressor.DynamicRegressor( h=5, level=95, type_pi=\"E\", date_formatting=\"original\" ) Dynamic Regression Model adapted from R's forecast::nnetar Parameters: h: an integer; forecasting horizon level: an integer; Confidence level for prediction intervals type_pi: a string; Type of prediction interval (currently \"gaussian\", ETS: \"E\", Arima: \"A\" or Theta: \"T\") date_formatting: a string; Currently: - \"original\": yyyy-mm-dd - \"ms\": milliseconds Attributes: fcast_: an object; raw result from fitting R's `ahead::dynrmf` through `rpy2` averages_: a list; mean forecast in a list ranges_: a list; lower and upper prediction intervals in a list output_dates_: a list; a list of output dates (associated to forecast) result_df_: a data frame; contains 3 columns, mean forecast, lower + upper prediction intervals, and a date index Examples: ``` import pandas as pd from ahead import DynamicRegressor # Data frame containing the time series dataset = { 'date' : ['2020-01-01', '2020-02-01', '2020-03-01', '2020-04-01', '2020-05-01'], 'value' : [34, 30, 35.6, 33.3, 38.1]} df = pd.DataFrame(dataset).set_index('date') print(df) # univariate time series forecasting d1 = DynamicRegressor(h = 5) d1.forecast(df) print(d1.result_df_) ``` [source] forecast DynamicRegressor.forecast(df) Forecasting method from DynamicRegressor class Parameters: df: a data frame; a data frame containing the input time series (see example)","title":"DynamicRegressor"},{"location":"documentation/dynamicregressor/#dynamicregressor","text":"Dynamic Regression model adapted from R's forecast::nnetar [source]","title":"DynamicRegressor"},{"location":"documentation/dynamicregressor/#dynamicregressor_1","text":"ahead.DynamicRegressor.DynamicRegressor.DynamicRegressor( h=5, level=95, type_pi=\"E\", date_formatting=\"original\" ) Dynamic Regression Model adapted from R's forecast::nnetar Parameters: h: an integer; forecasting horizon level: an integer; Confidence level for prediction intervals type_pi: a string; Type of prediction interval (currently \"gaussian\", ETS: \"E\", Arima: \"A\" or Theta: \"T\") date_formatting: a string; Currently: - \"original\": yyyy-mm-dd - \"ms\": milliseconds Attributes: fcast_: an object; raw result from fitting R's `ahead::dynrmf` through `rpy2` averages_: a list; mean forecast in a list ranges_: a list; lower and upper prediction intervals in a list output_dates_: a list; a list of output dates (associated to forecast) result_df_: a data frame; contains 3 columns, mean forecast, lower + upper prediction intervals, and a date index Examples: ``` import pandas as pd from ahead import DynamicRegressor # Data frame containing the time series dataset = { 'date' : ['2020-01-01', '2020-02-01', '2020-03-01', '2020-04-01', '2020-05-01'], 'value' : [34, 30, 35.6, 33.3, 38.1]} df = pd.DataFrame(dataset).set_index('date') print(df) # univariate time series forecasting d1 = DynamicRegressor(h = 5) d1.forecast(df) print(d1.result_df_) ``` [source]","title":"DynamicRegressor"},{"location":"documentation/dynamicregressor/#forecast","text":"DynamicRegressor.forecast(df) Forecasting method from DynamicRegressor class Parameters: df: a data frame; a data frame containing the input time series (see example)","title":"forecast"},{"location":"documentation/eat/","text":"EAT EAT (ETS, auto.arima, Theta) model [source] EAT ahead.EAT.EAT.EAT( h=5, level=95, weights=[0.3333333333333333, 0.3333333333333333, 0.3333333333333333], type_pi=\"E\", date_formatting=\"original\", ) Combinations of ETS (exponential smoothing), auto.arima and Theta models Parameters: h: an integer; forecasting horizon level: an integer; Confidence level for prediction intervals weights: a list; coefficients assigned to each method in the ensemble type_pi: a string; Type of prediction interval (currently \"gaussian\", ETS: \"E\", Arima: \"A\" or Theta: \"T\") date_formatting: a string; Currently: - \"original\": yyyy-mm-dd - \"ms\": milliseconds Attributes: fcast_: an object; raw result from fitting R's `ahead::eatf` through `rpy2` averages_: a list; mean forecast in a list ranges_: a list; lower and upper prediction intervals in a list output_dates_: a list; a list of output dates (associated to forecast) result_df_: a data frame; contains 3 columns, mean forecast, lower + upper prediction intervals, and a date index Examples: ``` import pandas as pd from ahead import EAT # Data frame containing the time series dataset = { 'date' : ['2020-01-01', '2020-02-01', '2020-03-01', '2020-04-01', '2020-05-01'], 'value' : [34, 30, 35.6, 33.3, 38.1]} df = pd.DataFrame(dataset).set_index('date') print(df) # univariate time series forecasting e1 = EAT(h = 5) # default, equal weights for each model=[1/3, 1/3, 1/3] e1.forecast(df) print(e1.result_df_) ``` [source] forecast EAT.forecast(df) Forecasting method from EAT class Parameters: df: a data frame; a data frame containing the input time series (see example)","title":"EAT"},{"location":"documentation/eat/#eat","text":"EAT (ETS, auto.arima, Theta) model [source]","title":"EAT"},{"location":"documentation/eat/#eat_1","text":"ahead.EAT.EAT.EAT( h=5, level=95, weights=[0.3333333333333333, 0.3333333333333333, 0.3333333333333333], type_pi=\"E\", date_formatting=\"original\", ) Combinations of ETS (exponential smoothing), auto.arima and Theta models Parameters: h: an integer; forecasting horizon level: an integer; Confidence level for prediction intervals weights: a list; coefficients assigned to each method in the ensemble type_pi: a string; Type of prediction interval (currently \"gaussian\", ETS: \"E\", Arima: \"A\" or Theta: \"T\") date_formatting: a string; Currently: - \"original\": yyyy-mm-dd - \"ms\": milliseconds Attributes: fcast_: an object; raw result from fitting R's `ahead::eatf` through `rpy2` averages_: a list; mean forecast in a list ranges_: a list; lower and upper prediction intervals in a list output_dates_: a list; a list of output dates (associated to forecast) result_df_: a data frame; contains 3 columns, mean forecast, lower + upper prediction intervals, and a date index Examples: ``` import pandas as pd from ahead import EAT # Data frame containing the time series dataset = { 'date' : ['2020-01-01', '2020-02-01', '2020-03-01', '2020-04-01', '2020-05-01'], 'value' : [34, 30, 35.6, 33.3, 38.1]} df = pd.DataFrame(dataset).set_index('date') print(df) # univariate time series forecasting e1 = EAT(h = 5) # default, equal weights for each model=[1/3, 1/3, 1/3] e1.forecast(df) print(e1.result_df_) ``` [source]","title":"EAT"},{"location":"documentation/eat/#forecast","text":"EAT.forecast(df) Forecasting method from EAT class Parameters: df: a data frame; a data frame containing the input time series (see example)","title":"forecast"},{"location":"documentation/ridge2regressor/","text":"Ridge2Regressor Random Vector functional link network model with 2 regularization parameters [source] Ridge2Regressor ahead.Ridge2.Ridge2Regressor.Ridge2Regressor( h=5, level=95, lags=1, nb_hidden=5, nodes_sim=\"sobol\", activation=\"relu\", a=0.01, lambda_1=0.1, lambda_2=0.1, type_pi=\"gaussian\", B=100, date_formatting=\"original\", seed=123, ) Random Vector functional link network model with 2 regularization parameters Parameters: h: an integer; forecasting horizon level: an integer; Confidence level for prediction intervals lags: an integer; Number of lags nb_hidden: an integer; Number of nodes in hidden layer nodes_sim: an integer; Type of simulation for nodes in the hidden layer (\"sobol\", \"halton\", \"unif\") activation: a string; Activation function (\"relu\", \"sigmoid\", \"tanh\", \"leakyrelu\", \"elu\", \"linear\") a: a float; hyperparameter for activation function \"leakyrelu\", \"elu\" lambda_1: a float; Regularization parameter for original predictors lambda_2: a float; Regularization parameter for transformed predictors type_pi: a string; Type of prediction interval (currently \"gaussian\", or \"bootstrap\") B: an integer Number of bootstrap replications for `type_pi == bootstrap` date_formatting: a string; Currently: - \"original\": yyyy-mm-dd - \"ms\": milliseconds seed: an integer; reproducibility seed for type_pi == 'bootstrap' Attributes: fcast_: an object; raw result from fitting R's `ahead::ridge2f` through `rpy2` averages_: a list of list; mean forecast in a list for each series ranges_: a list of list; lower and upper prediction intervals in a list for each series output_dates_: a list; a list of output dates (associated to forecast) result_dfs_: a tuple of data frames; each element of the tuple contains 3 columns, mean forecast, lower + upper prediction intervals, and a date index sims_: currently a tuple of numpy arrays for `type_pi == bootstrap`, simulations for each series Examples: ``` import pandas as pd from ahead import Ridge2Regressor # Data frame containing the time series dataset = { 'date' : ['2001-01-01', '2002-01-01', '2003-01-01', '2004-01-01', '2005-01-01'], 'series1' : [34, 30, 35.6, 33.3, 38.1], 'series2' : [4, 5.5, 5.6, 6.3, 5.1], 'series3' : [100, 100.5, 100.6, 100.2, 100.1]} df = pd.DataFrame(dataset).set_index('date') print(df) # multivariate time series forecasting r1 = Ridge2Regressor(h = 5) r1.forecast(df) print(r1.result_dfs_) ``` [source] forecast Ridge2Regressor.forecast(df) Forecasting method from Ridge2Regressor class Parameters: df: a data frame; a data frame containing the input time series (see example)","title":"Ridge2Regressor"},{"location":"documentation/ridge2regressor/#ridge2regressor","text":"Random Vector functional link network model with 2 regularization parameters [source]","title":"Ridge2Regressor"},{"location":"documentation/ridge2regressor/#ridge2regressor_1","text":"ahead.Ridge2.Ridge2Regressor.Ridge2Regressor( h=5, level=95, lags=1, nb_hidden=5, nodes_sim=\"sobol\", activation=\"relu\", a=0.01, lambda_1=0.1, lambda_2=0.1, type_pi=\"gaussian\", B=100, date_formatting=\"original\", seed=123, ) Random Vector functional link network model with 2 regularization parameters Parameters: h: an integer; forecasting horizon level: an integer; Confidence level for prediction intervals lags: an integer; Number of lags nb_hidden: an integer; Number of nodes in hidden layer nodes_sim: an integer; Type of simulation for nodes in the hidden layer (\"sobol\", \"halton\", \"unif\") activation: a string; Activation function (\"relu\", \"sigmoid\", \"tanh\", \"leakyrelu\", \"elu\", \"linear\") a: a float; hyperparameter for activation function \"leakyrelu\", \"elu\" lambda_1: a float; Regularization parameter for original predictors lambda_2: a float; Regularization parameter for transformed predictors type_pi: a string; Type of prediction interval (currently \"gaussian\", or \"bootstrap\") B: an integer Number of bootstrap replications for `type_pi == bootstrap` date_formatting: a string; Currently: - \"original\": yyyy-mm-dd - \"ms\": milliseconds seed: an integer; reproducibility seed for type_pi == 'bootstrap' Attributes: fcast_: an object; raw result from fitting R's `ahead::ridge2f` through `rpy2` averages_: a list of list; mean forecast in a list for each series ranges_: a list of list; lower and upper prediction intervals in a list for each series output_dates_: a list; a list of output dates (associated to forecast) result_dfs_: a tuple of data frames; each element of the tuple contains 3 columns, mean forecast, lower + upper prediction intervals, and a date index sims_: currently a tuple of numpy arrays for `type_pi == bootstrap`, simulations for each series Examples: ``` import pandas as pd from ahead import Ridge2Regressor # Data frame containing the time series dataset = { 'date' : ['2001-01-01', '2002-01-01', '2003-01-01', '2004-01-01', '2005-01-01'], 'series1' : [34, 30, 35.6, 33.3, 38.1], 'series2' : [4, 5.5, 5.6, 6.3, 5.1], 'series3' : [100, 100.5, 100.6, 100.2, 100.1]} df = pd.DataFrame(dataset).set_index('date') print(df) # multivariate time series forecasting r1 = Ridge2Regressor(h = 5) r1.forecast(df) print(r1.result_dfs_) ``` [source]","title":"Ridge2Regressor"},{"location":"documentation/ridge2regressor/#forecast","text":"Ridge2Regressor.forecast(df) Forecasting method from Ridge2Regressor class Parameters: df: a data frame; a data frame containing the input time series (see example)","title":"forecast"},{"location":"documentation/var/","text":"VAR Vector AutoRegressive model [source] VAR ahead.VAR.VAR.VAR(h=5, level=95, lags=1, type_VAR=\"none\", date_formatting=\"original\") Vector AutoRegressive model Parameters: h: an integer; forecasting horizon level: an integer; Confidence level for prediction intervals lags: an integer; the lag order type_VAR: a string; Type of deterministic regressors to include (\"const\", \"trend\", \"both\", \"none\") date_formatting: a string; Currently: - \"original\": yyyy-mm-dd - \"ms\": milliseconds Attributes: fcast_: an object; raw result from fitting R's `ahead::varf` through `rpy2` averages_: a list of lists; mean forecast in a list for each series ranges_: a list of lists; lower and upper prediction intervals in a list for each series output_dates_: a list; a list of output dates (associated to forecast) result_dfs_: a tuple of data frames; each element of the tuple contains 3 columns, mean forecast, lower + upper prediction intervals, and a date index Examples: ``` import pandas as pd from ahead import VAR # Data frame containing the time series dataset = { 'date' : ['2001-01-01', '2002-01-01', '2003-01-01', '2004-01-01', '2005-01-01'], 'series1' : [34, 30, 35.6, 33.3, 38.1], 'series2' : [4, 5.5, 5.6, 6.3, 5.1], 'series3' : [100, 100.5, 100.6, 100.2, 100.1]} df = pd.DataFrame(dataset).set_index('date') print(df) # multivariate time series forecasting v1 = VAR(h = 5, date_formatting = \"original\", type_VAR=\"none\") v1.forecast(df) print(v1.result_dfs_) ``` [source] forecast VAR.forecast(df) Forecasting method from VAR class Parameters: df: a data frame; a data frame containing the input time series (see example)","title":"VAR"},{"location":"documentation/var/#var","text":"Vector AutoRegressive model [source]","title":"VAR"},{"location":"documentation/var/#var_1","text":"ahead.VAR.VAR.VAR(h=5, level=95, lags=1, type_VAR=\"none\", date_formatting=\"original\") Vector AutoRegressive model Parameters: h: an integer; forecasting horizon level: an integer; Confidence level for prediction intervals lags: an integer; the lag order type_VAR: a string; Type of deterministic regressors to include (\"const\", \"trend\", \"both\", \"none\") date_formatting: a string; Currently: - \"original\": yyyy-mm-dd - \"ms\": milliseconds Attributes: fcast_: an object; raw result from fitting R's `ahead::varf` through `rpy2` averages_: a list of lists; mean forecast in a list for each series ranges_: a list of lists; lower and upper prediction intervals in a list for each series output_dates_: a list; a list of output dates (associated to forecast) result_dfs_: a tuple of data frames; each element of the tuple contains 3 columns, mean forecast, lower + upper prediction intervals, and a date index Examples: ``` import pandas as pd from ahead import VAR # Data frame containing the time series dataset = { 'date' : ['2001-01-01', '2002-01-01', '2003-01-01', '2004-01-01', '2005-01-01'], 'series1' : [34, 30, 35.6, 33.3, 38.1], 'series2' : [4, 5.5, 5.6, 6.3, 5.1], 'series3' : [100, 100.5, 100.6, 100.2, 100.1]} df = pd.DataFrame(dataset).set_index('date') print(df) # multivariate time series forecasting v1 = VAR(h = 5, date_formatting = \"original\", type_VAR=\"none\") v1.forecast(df) print(v1.result_dfs_) ``` [source]","title":"VAR"},{"location":"documentation/var/#forecast","text":"VAR.forecast(df) Forecasting method from VAR class Parameters: df: a data frame; a data frame containing the input time series (see example)","title":"forecast"}]}